
(title1){ALGOVOX}

A constructed language by Jack Eisenmann

This page was generated from (!link){https://github.com/ostracod/algovox} at (!const){timestamp}.

(title2){DESIGN FEATURES}

Algovox is a constructed language for communication between humans, but borrows elements of computer programming languages. In particular, Algovox follows the imperative programming paradigm, and includes the following features:

> Mutable variable declaration
> Storage of nouns in arrays
> "If" statements for conditional evaluation
> Loops for iterative evaluation

Algovox is Turing-complete. With the correct sequence of statements, the speaker can express any Turing machine, using an array of nouns to represent an infinitely long tape.

Algovox has the following design goals:

> The grammar should prevent syntactic ambiguity.
> The semantics should be precise, especially pertaining to sets of nouns.
> The language should allow communication of complex ideas.
> The morphology should incorporate mnemonics into words to facilitate memorization.
> The lexicon should contain between 800 to 1000 words.

Depending on who you ask, Algovox may be considered to be a logical language ("loglang"). However, the design of Algovox is rooted more in software engineering than formal logic.

(title2){PHONOLOGY}

Algovox has 16 consonants:

> (av){k} = /k/ as in "(underline){C}an"
> (av){g} = /g/ as in "(underline){G}et"
> (av){s} = /s/ as in "(underline){S}et"
> (av){z} = /z/ as in "(underline){Z}ip"
> (av){c} = /(!char){283}/ as in "(underline){Sh}ot"
> (av){j} = /(!char){292}/ as in "Mea(underline){s}ure"
> (av){t} = /t/ as in "(underline){T}an"
> (av){d} = /d/ as in "(underline){D}ot"
> (av){f} = /f/ as in "(underline){F}an"
> (av){v} = /v/ as in "(underline){V}an"
> (av){p} = /p/ as in "(underline){P}an"
> (av){b} = /b/ as in "(underline){B}an"
> (av){m} = /m/ as in "(underline){M}an"
> (av){n} = /n/ as in "(underline){N}et"
> (av){r} = /(!char){279}/ as in "(underline){R}an"
> (av){l} = /l/ as in "(underline){L}et"

Algovox has 5 vowels:

> (av){i} = /i/ as in "B(underline){ee}t"
> (av){e} = /(!char){25B}/ as in "B(underline){e}t
> (av){a} = /a/ as in "B(underline){a}t"
> (av){o} = /o/ as in "B(underline){oa}t"
> (av){u} = /u/ as in "B(underline){oo}t"

Every syllable has the structure (code){(C1)C2(C3)V(C4)}. Syllable phonemes follow the rules below:

> (code){C2} and (code){V} are required. They cannot be absent.
> (code){C1}, (code){C3}, and (code){C4} are optional. They may be absent.
> (code){C1} may be (av){s} if (code){C2} is (av){k}, (av){t}, (av){p}, or (av){m}. Otherwise, (code){C1} must be absent.
> (code){C2} may be (av){k}, (av){g}, (av){s}, (av){z}, (av){c}, (av){j}, (av){t}, (av){d}, (av){f}, (av){v}, (av){p}, (av){b}, (av){m}, or (av){r}.
> (code){C3} may be (av){r} if (code){C2} is (av){k}, (av){g}, (av){t}, (av){d}, (av){p}, or (av){b}. Otherwise, (code){C3} must be absent.
> (code){V} may be (av){i}, (av){e}, (av){a}, (av){o}, or (av){u}.
> (code){C4} may be (av){n}, (av){l}, or absent.

Emphasis in each word falls on the first syllable, and then alternates every other syllable.

(title2){MORPHOLOGY}

Every word consists of one or more syllables. Every syllable is a morpheme. Every morpheme is either a "blueberry morpheme" or a "cranberry morpheme".

Each blueberry morpheme is defined to have a particular meaning. When a word consists of a single blueberry morpheme, the word has the same meaning as the morpheme. When a word contains multiple morphemes, blueberry morphemes in the word serve as mnemonics to remember the meaning of the word.

Cranberry morphemes, on the other hand, are not defined to have any meaning out of context. Cranberry morphemes serve to differentiate words, but do not provide clues about the meanings of words. A word may consist of a single cranberry morpheme, but the meaning of such a word does not indicate the meanings of other words which contain the cranberry morpheme.

Syllables which contain (av){T}, (av){G}, (av){V}, or (av){C} are cranberry morphemes. All other syllables are blueberry morphemes.

When a word contains multiple morphemes, the first morpheme determines the "main" meaning of the word, while the remaining morphemes serve as modifiers.

Certain vowels are considered to be in "antonym pairs":

> (av){e} (original) (!char){2194} (av){i} (antonym)
> (av){a} (original) (!char){2194} (av){u} (antonym)

When a blueberry morpheme has an antonym, the morphemes will differ by an antonym vowel pair.

When a word has an antonym, and the word contains a cranberry morpheme, the words may differ by an antonym vowel pair in the cranberry morpheme.

(title2){EXPRESSION SYNTAX}

Every word in an expression is either a "node" or a "relator". Each node returns a noun, and each relator describes a relationship between two nouns.

Every node belongs to one of the following subcategories:

> Noun literal
> Variable
> Function

Each noun literal returns a noun which is determined by the dictionary definition of the noun literal.

Each variable has a name chosen by the speaker. Variable names must begin with (av){???}. Each variable stores a noun, and may be assigned a new noun at various points of evaluation. A variable returns the noun which it stores.

Each function accepts one or more operand nouns. Every operand is considered to be a "primary" operand or a "secondary" operand. Each function returns a noun which depends on the provided operands and the dictionary definition of the function.

Every expression has the following structure:

(code){(node) (relators) (child expressions)}

Every expression returns the noun which is returned by the initial node in the expression.

Every expression contains one relator for each child expression. Suppose that (code){X} is the noun returned by the expression, and (code){Y} is the noun returned by a corresponding child expression. Algovox includes the following relators:

> (av){???} signifies that (code){X} is a primary operand of (code){Y}.
> (av){???} signifies that (code){Y} is a primary operand of (code){X}.
> (av){???} signifies that (code){X} is a secondary operand of (code){Y}.
> (av){???} signifies that (code){Y} is a secondary operand of (code){X}.

The ordering of operands may be significant for certain functions. Functions consume operands in the same order as the operands appear in the parent expression.

Some functions are considered to be "verbs". A verb returns a noun representing the state, quality, action, or process ("SQAP") of the verb. The primary operands of a verb are the subjects. A transitive verb can accept secondary operands, which are the direct objects of the verb. Intransitive verbs cannot accept secondary operands.

(title2){STATEMENT SYNTAX}

Communication in Algovox consists of a series of "statements". Each statement may be a "directive statement" or an "assertion statement". Directive statements have the following structure:

(code){(directive) (arguments)}

The directive is a word which determines the role of the statement and the number of arguments which the statement accepts. Each argument may be a variable or an expression.

Each assertion statement consists of a single verb expression without a directive. An assertion statement declares that the SQAP returned by the expression is true.

Certain statements begin and end "statement blocks", which contain a nested series of statements. A variable can only be referenced within the block where the variable was declared. A variable is not accessible within parent blocks of the block where the variable was declared.

Assertion statements do not begin or end blocks. A directive statement may begin or end blocks depending on the dictionary definition of the directive.

Each statement ends with a punctuation mark, which is determined by the following rules:

> If a statement begins a block, the statement ends with a colon.
> Otherwise if the direct parent block of the statement is the top-level block, the statement ends with a period.
> Otherwise the statement ends with a comma.

Statements may be written on their own lines, and blocks may be indented to improve clarity. However, writing statements in this manner is not required.

(title2){SEMANTICS}

Each noun may have one of the following types:

> Physical entity (Ex: house, tree, sand, fire)
> Concept (Ex: position, name, rule)
> SQAP (Ex: walking, sight, happiness)
> Number (Ex: 123, 0.5, -8)
> Boolean (True or false)
> List (Ordered sequence of nouns)

In certain cases, the listener may not know the exact value of a noun. However, the listener may still consider an abstract representation of the value, and the listener may analytically use such a representation. For example, the listener might not know the exact population of Earth, but the listener is able to comprehend the quantity in a symbollic manner.

After the listener receives a series of statements, the listener must "evaluate" the series of statements in their mind. Evaluation is subject to "control flow", where some statements may be evaluated conditionally or multiple times. Whenever the listener evaluates a statement, the listener must update their mental model of the universe to agree with the statement. If the listener deems the speaker to be untrustworthy, the listener may reject the truth of the speaker's message. However, such considerations of trust are outside the scope of this document.

When the listener evaluates a statement block, the listener must evaluate each statement in the block in order beginning with the first statement. The (av){???} statement may be used to end any statement block.

The (av){???} statement behaves like an "if" statement in traditional programming languages. (av){???} accepts a single argument expression which returns a boolean noun, and (av){???} begins a statement block. If the noun is true, then the listener must evaluate the statement block. If the noun is false, then the listener must ignore the statement block.

The (av){???} statement may be followed by (av){???} statements and a (av){???} statement. If the (av){???} block was not evaluated, then the listener must evaluate the block of the first (av){???} statement whose condition is true. If none of the conditions were true, the listener must evaluate the block of the (av){???} statement.

Note that if the listener does not know the value of a condition, the listener may still consider conditional branches in a hypothetical manner. For example, if the condition of a (av){???} statement is whether the sky is cloudy, but the listener does not know whether the sky is cloudy, the listener may still analytically respect the block of the (av){???} statement.

The (av){???} statement declares a variable in the current block, and optionally assigns an initial noun to the variable. The (av){???} statement assigns a new noun to a variable. As evaluation progresses, the listener must keep track of the noun stored in each variable.

The (av){???} statement behaves like a "while" statement in traditional programming languages. The listener must repeatedly evaluate the block of the (av){???} statement until the condition of the (av){???} statement is false. Beware that an infinite loop may incapacitate the listener.

The (av){???} statement accepts a variable and a list of nouns. The listener must evaluate the body of the (av){???} statement once for each noun, assigning the noun to the variable prior to each evaluation.


